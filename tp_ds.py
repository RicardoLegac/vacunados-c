import pandas as pd 
import numpy as np
import perfplot
import matplotlib.image as mpimg
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.dates import DateFormatter
import seaborn as sns
import matplotlib.dates as dates
from countryinfo import CountryInfo
import matplotlib.ticker as ticker

'''LECTURA DE DATOS'''
datos=pd.read_csv('/home/rick/Downloads/vacunados.csv',sep=';',warn_bad_lines=False,header=0);
descripcion=datos['descripcion_vacuna'].value_counts(ascending=True)

plt.style.use('seaborn')

''''IMPRESION DE VACUNAS APLICADAS '''
print("CANTIDAD DE VACUNAS APLICADA POR TIPO DE VACUNA ASCENDENTEMENTE:")
descripcion=descripcion.reset_index()
descripcion.rename(columns={'index': 'Vacunas', 'descripcion_vacuna': 'Cantidad'}, inplace=True)
print(descripcion)

'''DISTRIBUCION DE VACUNAS APLICADAS (PLOT)'''
descripcion.groupby(['Vacunas']).sum().plot(kind='pie', y='Cantidad', figsize=(10,10))

''' CANTIDAD DE VACUNADOS POR FECHA '''
datos['fecha_aplicacion']=pd.to_datetime(datos['fecha_aplicacion'])
counts_fechas = datos.groupby(['fecha_aplicacion']).count().sort_values(['establecimiento'],ascending=False).head(15)
counts_fechas = counts_fechas.drop(["nombre","apellido","cedula","descripcion_vacuna","actualizado_al",'dosis'],axis=1)
counts_fechas.rename(columns={'establecimiento':'Cantidad'},inplace=True)
counts_fechas.reset_index(inplace=True)


'''ESTABLECIMIENTOS ORDENADOS POR CANTIDAD DE VACUNADOS'''
count_sorted_establecimiento = datos.groupby(['establecimiento']).count()
count_sorted_establecimiento = count_sorted_establecimiento.sort_values(['nombre'],ascending=False).head(20)
count_sorted_establecimiento  = count_sorted_establecimiento .drop(["nombre","apellido","cedula","descripcion_vacuna","actualizado_al",'dosis'],axis=1)
count_sorted_establecimiento.rename(columns={'fecha_aplicacion':'Cantidad'},inplace=True)
count_sorted_establecimiento.plot(kind = 'barh')
'''
VISUALIZACION DE CANTIDAD DE VACUNADOS EN FECHAS CON MUCHA DENSIDAD
'''
counts_fechas.groupby(['fecha_aplicacion']).sum().plot(kind='bar', y='Cantidad', figsize=(10,10))



'''DOSIS APLICADAS DISTRIBUCION'''
count_sorted_dosis = datos.groupby(['dosis']).count()
count_sorted_dosis= count_sorted_dosis.sort_values(['nombre'],ascending=False)
count_sorted_dosis  = count_sorted_dosis .drop(["nombre","apellido","cedula","descripcion_vacuna","actualizado_al","establecimiento"],axis=1)
count_sorted_dosis.rename(columns={'fecha_aplicacion':'Cantidad'},inplace=True)
count_sorted_dosis.reset_index()
plt.tight_layout()
count_sorted_dosis.plot.bar()


'''CANTIDAD DE MENORES VACUNADOS'''
menores=datos[datos.nombre == 'MENOR DE EDAD'].shape[0]
datos.sort_values(['fecha_aplicacion'])
lugar=datos.nombre.ne('MENOR DE EDAD').idxmax()


'''CANTIDAD DE CASOS DE COVID-19 POR FECHA'''
totalcases = pd.read_csv('/home/rick/Desktop/vacunados c/casos-paraguay.csv',sep=',',warn_bad_lines=False,header=0);
totalcases = totalcases.drop(columns=['Country_code','WHO_region', 'Cumulative_cases', 'Cumulative_deaths','Country'])
casos_dia = totalcases.drop(columns=['New_deaths'])
muertes_dia = totalcases.drop(columns=['New_cases'])
print("DATOS DE LOS ULTIMOS 10 DIAS\n")
print("Ultimos csasos confirmados: \n")
print(casos_dia.tail(10))
print("\nUltimos fallecimientos registrados: \n")
print(muertes_dia.tail(10))


'''PORCENTAJE DE HABITANTES VACUNADOS CON AL MENOS UNA DOSIS'''
habitantes_py = CountryInfo('Paraguay').population()
cantidad_vacunados=count_sorted_dosis.loc[1,"Cantidad"]
porc=(cantidad_vacunados/habitantes_py)*100
print("\nporcentaje de habitantes vacunados con al menos una dosis: ", porc)

'''GRAFICA DONDE SE VE COMO LA VACUNA HACE EFICACIA Y BAJA LA CANTIDAD DE INFECTADOS LUEGO DE SU APLICACION'''
start = pd.to_datetime('03/01/2020')
rng = pd.date_range(start, periods=100)
totalcases = pd.DataFrame({'Date_reported': rng, 'New_cases': range(100)})  
totalcases.New_cases = totalcases.New_cases * 15 / totalcases.Date_reported.dt.day
ax = totalcases['New_cases'].plot() 
#ticklabels = totalcases.Date_reported.strftime('%d/%m/%Y')
#ax.xaxis.set_major_formatter(ticker.FixedFormatter(ticklabels))
plt.show()


'''
import matplotlib.cbook as cbook
data = cbook.get_sample_data('goog.npz', np_load=True)['price_data']

fig, ax = plt.subplots()
ax.plot('Date_reported', 'New_cases', data=totalcases)

# Major ticks every 6 months.
fmt_half_year = mdates.MonthLocator(interval=6)
ax.xaxis.set_major_locator(fmt_half_year)

# Minor ticks every month.
fmt_month = mdates.MonthLocator()
ax.xaxis.set_minor_locator(fmt_month)

# Text in the x axis will be displayed in 'YYYY-mm' format.
ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m/%Y'))

# Round to nearest years.
datemin = np.datetime64(data['Date_reported'][0], 'Y')
datemax = np.datetime64(data['Date_reported'][-1], 'Y') + np.timedelta64(1, 'Y')
ax.set_xlim(datemin, datemax)

# Format the coords message box, i.e. the numbers displayed as the cursor moves
# across the axes within the interactive GUI.
ax.format_xdata = mdates.DateFormatter('%d/%m/%Y')
ax.format_ydata = lambda x: f'${x:.2f}'  # Format the price.
ax.grid(True)

# Rotates and right aligns the x labels, and moves the bottom of the
# axes up to make room for them.
fig.autofmt_xdate()

plt.show()
'''






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































